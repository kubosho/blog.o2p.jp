<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog.o2p.jp</title>
  <subtitle>kubosho_が日々気づいたことやハマったことを書き残していくブログです。</subtitle>
  <id>http://blog.o2p.jp/</id>
  <link href="http://blog.o2p.jp/"/>
  <link href="http://blog.o2p.jp/feed" rel="self"/>
  <updated>2014-04-28T04:00:00Z</updated>
  <author>
    <name>kubosho_</name>
  </author>
  <entry>
    <title>Boxenを使ってMacを設定してみた</title>
    <link rel="alternate" href="/2014/04/28/use-boxen.html"/>
    <id>/2014/04/28/use-boxen.html</id>
    <published>2014-04-28T04:00:00Z</published>
    <updated>2014-04-28T04:00:00Z</updated>
    <author>
      <name>kubosho_</name>
    </author>
    <content type="html">&lt;p&gt;新しい MacBook Pro を手に入れ、いろいろと設定する必要が出てきたのと、MacBook Air Retina なんてものが出た時にはすぐに買うし、その際にも設定が必要なので、設定の手間を省くために boxen であれこれ設定しようとしたらハマりまくったので、ハマったところを書いていく。&lt;/p&gt;

&lt;h2&gt;Boxen を使うにあたって準備しておくもの&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/boxen/our-boxen"&gt;boxen/our-boxen&lt;/a&gt; の README より引用。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(できれば)Xcode のフルインストール&lt;/li&gt;
&lt;li&gt;Xcode Command Line Tools のインストール

&lt;ul&gt;
&lt;li&gt;Mavericks からはインストール方法が変わっていた。&lt;a href="http://hiroki.jp/mavericks-command-line-developer-tools"&gt;MavericksでCommand Line Developer Toolsをインストールする方法が変更 | Act as Professional - hiroki.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ハイフンが入っていない GitHub のアカウント&lt;/li&gt;
&lt;li&gt;rvm のアンインストール&lt;/li&gt;
&lt;li&gt;rbenv のアンインストール

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/astronaughts/items/760d56fb5674707a9a0f"&gt;Git で入れてしまった rbenv を削除して Homebrew で入れなおした時のメモ - Qiita&lt;/a&gt;を見ながら rbenv を削除した。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;chruby のアンインストール&lt;/li&gt;
&lt;li&gt;homebrew のアンインストール&lt;/li&gt;
&lt;li&gt;nvm のアンインストール&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自分の場合、homebrew と rbenv をインストールして使っていたので、アンインストールする必要が出てしまった。特に homebrew はアンインストールが面倒だったので、&lt;a href="https://github.com/Homebrew/homebrew/wiki/FAQ#how-do-i-uninstall-homebrew"&gt;FAQ · Homebrew/homebrew Wiki&lt;/a&gt; を元にやり方を書いていく。&lt;/p&gt;

&lt;h2&gt;homebrew のアンインストール方法&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/mxcl/1173223"&gt;Uninstall Homebrew&lt;/a&gt; を git clone もしくはダウンロードする&lt;/li&gt;
&lt;li&gt;実行権限を与えるため &lt;code&gt;chmod u+x uninstall_homebrew.sh&lt;/code&gt; を実行する&lt;/li&gt;
&lt;li&gt;sh ./uninstall_homebrew.sh を実行&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これで homebrew は綺麗さっぱりアンインストールできると思う。しかし次の難関、puppetfile のバージョン番号がよく分からないという問題にぶち当たった。&lt;/p&gt;

&lt;h2&gt;puppetfile 内のバージョン is 何&lt;/h2&gt;

&lt;p&gt;puppetfile 内に書くバージョンは &lt;a href="https://github.com/boxen"&gt;Boxen&lt;/a&gt; 内の puppet- から始まるリポジトリ内のタグのバージョン番号となる。&lt;/p&gt;

&lt;p&gt;最初これが分からなくて、Node なんかは 3.7.0 とか書かれていて、「インストールしたいバージョンを足した合計を書くのか？」とか思った。例えば 0.10 と 0.11 をインストールしたいのなら 0.21 と書くような感じ。よく考えれば違うと分かるけど、Boxen の puppet- から始まるリポジトリ内のタグのバージョン番号とは分からなかった。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;さて、これで boxen を実行した…と思ったら、下記に示すエラーが出てしまった。&lt;/p&gt;

&lt;h2&gt;エラー一覧&lt;/h2&gt;

&lt;h3&gt;Mavericks+Xcode 5.1 という組み合わせで JSON の gem install に失敗するときの対処法&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/boxen/our-boxen/issues/528"&gt;Ruby Gem install Json fails on Mavericks and Xcode 5.1 - unknown argument: &amp;apos;-multiply_definedsuppress&amp;apos; · Issue #528 · boxen/our-boxen&lt;/a&gt; に書かれているように、ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future script/boxen とすることにより、実行されるようになる。&lt;/p&gt;

&lt;h3&gt;Nginx インストール時に pcre が not a directory となる&lt;/h3&gt;
&lt;pre class="highlight plaintext"&gt;Installing pcre from S3...
tar: Unrecognized archive format
tar: Error exit delayed from previous errors.
Error: /opt/boxen/homebrew/Cellar/pcre/8.35 is not a directory
Warning: Bottle installation failed: building from source.
Warning: Nothing was installed to /opt/boxen/homebrew/Cellar/pcre/8.35
Error: /opt/boxen/homebrew/Cellar/pcre/8.35 is not a directory
&lt;/pre&gt;

&lt;p&gt;boxen のディレクトリで ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future ./script/boxen --no-fde というコマンドを実行した時に上記ソースのようなエラーが出て、インストールが先に進まないというのが発生した。&lt;/p&gt;

&lt;p&gt;しかし、&lt;a href="https://github.com/fasrc/boxen/wiki"&gt;Home · fasrc/boxen Wiki&lt;/a&gt; によると ./script/boxen を実行し直すことによりインストールが出来るらしい。しかし自分の場合、Git周りでエラーが出てしまった。&lt;/p&gt;

&lt;p&gt;再度調べてみたところ、&lt;a href="https://github.com/boxen/our-boxen/issues/421"&gt;Our-Boxen fails to install · Issue #421 · boxen/our-boxen&lt;/a&gt; というissueを見つけた。これによると &lt;code&gt;brew install pcre&lt;/code&gt; とした後再度boxenを実行する。&lt;/p&gt;

&lt;h3&gt;puppet-module-data の 0.0.3 を使うと uninitialized constant Puppet::DataBinding::LookupError というエラーが出る&lt;/h3&gt;

&lt;p&gt;とりあえず 0.0.1 を使うようにすればエラーは出なくなる。&lt;a href="https://github.com/ripienaar/puppet-module-data/issues/6"&gt;それらしきissueも報告されている&lt;/a&gt;。とはいえ、0.0.3 だとなぜエラーが出るのかは謎…&lt;/p&gt;

&lt;h2&gt;You haven&amp;#39;t loaded Boxen&amp;#39;s environment yet!&lt;/h2&gt;

&lt;p&gt;以下のようなメッセージが出る時がある。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;--&amp;gt; You haven&amp;#39;t loaded Boxen&amp;#39;s environment yet!
   To permanently fix this, source /opt/boxen/env.sh at the end
   of your shell&amp;#39;s startup file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;解決策としては、&lt;a href="http://threetreeslight.com/post/58009785849/boxen-mac"&gt;Boxenを利用したMacのセットアップ | iii ThreeTreesLight&lt;/a&gt;にも書かれているように、.zshrc などを任意のエディタで開き、&lt;code&gt;source /opt/boxen/env.sh&lt;/code&gt; として boxen の 環境設定ファイルを読み込むようにする。&lt;/p&gt;

&lt;p&gt;ちなみに、&lt;a href="http://threetreeslight.com/post/58009785849/boxen-mac"&gt;Boxenを利用したMacのセットアップ | iii ThreeTreesLight&lt;/a&gt;の記事は、ハマった時に見たら問題が解決されたので良記事だと思う。&lt;/p&gt;

&lt;h2&gt;紆余曲折あったけどできた&lt;/h2&gt;

&lt;p&gt;自分用の Mac の設定ができたので公開します。Boxen を使いたいという場合に参考になるかもしれないです。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kubosho/macbox"&gt;kubosho/macbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;アプリケーションは以下のものがインストールされる。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kubosho/macbox/issues/1"&gt;インストールするアプリケーション一覧 · Issue #1 · kubosho/macbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mac の設定は以下の通りとなる。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kubosho/macbox/issues/2"&gt;Macの各種設定をおこなうようにする · Issue #2 · kubosho/macbox&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AndroidのChromeで見ているページをPCでデバッグする方法</title>
    <link rel="alternate" href="/2014/04/12/android-chrome-remote-dubugging.html"/>
    <id>/2014/04/12/android-chrome-remote-dubugging.html</id>
    <published>2014-04-12T14:50:00Z</published>
    <updated>2014-04-12T14:50:00Z</updated>
    <author>
      <name>kubosho_</name>
    </author>
    <content type="html">&lt;p&gt;AndroidのChromeを用いてデバッグをしたいということがある。その際のデバッグ方法として、自分が知っている限りでは以下の2つがあった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Android SDKをダウンロードしてデバッグ

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://slumbers99.blogspot.jp/2013/01/chrome-for-android-usb-web.html"&gt;Chrome for Android の USB ウェブデバッグでスマフォWEBサイトをデバッグする | SLUMBERS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ChromeにADBという拡張機能をインストールしてデバッグ

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://iti.hatenablog.jp/entry/2013/11/05/182133"&gt;SDK不要Android端末のリモートデバッグChrome拡張機能「ADB」 - Intelligent Technology&amp;#39;s Technical Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;しかしどちらもAndroid SDKのダウンロードと設定や、PCのChromeに拡張機能をインストールしないといけなく、正直めんどいなと思ったら、Chrome 32以上ならは上記のSDKなどをダウンロードしなくてもPCからデバッグが出来るようだ。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/hokaccha/20140109/1389254171"&gt;最近のAndroid Chromeのリモートデバッグ - hokaccha.hamalog v2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ということで、&lt;a href="https://developers.google.com/chrome-developer-tools/docs/remote-debugging?hl=ja"&gt;Remote Debugging Chrome on Android - Chrome DevTools — Google Developers&lt;/a&gt;や他サイトに沿ってデバッグが行えるようにしたので、やったことを書いていく。&lt;/p&gt;

&lt;h2&gt;Android側のUSBデバッグを有効にする&lt;/h2&gt;

&lt;p&gt;Android 4.2以上のバージョンの場合、開発者向けオプションは初期設定では隠されている。それ以下の場合は設定の下の方に開発者向けオプションがある。&lt;/p&gt;

&lt;p&gt;Android 4.2以上で開発者向けオプションを表示するには、設定-&amp;gt;システム:端末情報内の項目にある「ビルド番号」を7回タップする必要がある。タップし続けると「デベロッパーになるまであとnステップです」と表示されたり、7回タップすると「あなたは今開発者になりました！」と表示されるので分かりやすい&lt;a href="#note1"&gt;*1&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;「あなたは今開発者になりました！」と表示されたあと、設定のシステムの所に「開発者向けオプション」が表示されるようになる。そしてそのオプションの中に「USBデバッグ」という項目があるので、チェックを付ける。&lt;/p&gt;

&lt;p&gt;それでPCにUSBでAndroidを繋いで無事デバッグ出来るように…というところだが、Windowsの場合は別途&lt;a href="http://developer.android.com/sdk/win-usb.html"&gt;Google USB Driver | Android Developers&lt;/a&gt;からUSB Driverをダウンロードする必要がある。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://android.akjava.com/html5/usbdebug.html"&gt;USBデバッグ&lt;/a&gt;によると、今つないでいるPCでUSBデバッグを許可するかどうかというポップアップが表示される機種もあるようだが、SO-04E Hatsune Mikuモデル(Android 4.2.2)では表示されなかった。&lt;/p&gt;

&lt;h2&gt;Chrome側でデバイス検出を有効にする&lt;/h2&gt;

&lt;p&gt;&lt;q&gt;chrome://inspect/#devices&lt;/q&gt;にChromeでアクセスすることにより、以下のような設定画面が出てくる。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://imgur.com/RDDvfz2"&gt;&lt;img src="http://i.imgur.com/RDDvfz2.png" title="Hosted by imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここから「Discover USB devices」にチェックを入れ、USBデバッグを有効にしたAndroid端末を繋ぐことにより、以下のように各種操作が出来るようになる。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://imgur.com/45dBUuE"&gt;&lt;img src="http://i.imgur.com/45dBUuE.png" title="Hosted by imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;inspectはChromeのdeveloper toolsがそのまま使えたり、アドレス指定でタブを開かせたり、他にもいろいろと出来るので便利。&lt;/p&gt;

&lt;hr&gt;

&lt;ol&gt;
&lt;li&gt;&lt;span id="note1"&gt;なお、タップの間隔はいくら遅くても大丈夫そうだが、戻るボタンなどで前の画面に戻ってしまうと、また最初からタップし直しとなってしまう。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>一人暮らしにあって良かったものを7つ挙げてみた</title>
    <link rel="alternate" href="/2014/04/10/requirements-for-new-life.html"/>
    <id>/2014/04/10/requirements-for-new-life.html</id>
    <published>2014-04-10T00:00:00Z</published>
    <updated>2014-04-10T00:00:00Z</updated>
    <author>
      <name>kubosho_</name>
    </author>
    <content type="html">&lt;p&gt;4月になり、新たに一人暮らしを始めた人もいると思う。自分もその類で3月より一人暮らしを始めた。&lt;/p&gt;

&lt;p&gt;というわけで、一人暮らしを始めて1ヶ月、その中でこれはあったほうがいいというものが7つほどあるので紹介していく。&lt;/p&gt;

&lt;h2&gt;物をかけるフック&lt;/h2&gt;

&lt;p&gt;いま住んでいるところは収納できる場所が結構ある。&lt;/p&gt;

&lt;p&gt;とはいえ、毎日収納場所から服を取り出すのは面倒だ。出来る事ならある程度は外に出しておきたい。そんな時にフックを収納の扉に貼り付けておくと、服がそこにかけられるようになるので、手間がある程度は省ける。&lt;/p&gt;

&lt;p&gt;あとは流しにタオルをかけておくためだったり、バッグをかけたり、玄関の扉に鍵をぶら下げておくのにも使えるので、10個くらいは買っても損ではないかもしれない。&lt;/p&gt;

&lt;h2&gt;コロコロ&lt;/h2&gt;

&lt;p&gt;部屋というのは最初はきれいだが、日が経つにつれどうしても髪の毛・ほこり・食べかすなどが床に落ちてしまう。&lt;/p&gt;

&lt;p&gt;そんな時、少し転がすだけでゴミを取ってくれるコロコロは役に立つ。これが無かったら床がもうちょっと汚れていたに違いない。&lt;/p&gt;

&lt;h2&gt;ゴミ箱&lt;/h2&gt;

&lt;p&gt;料理したり、コンビニなどでご飯を買ってきたりするとどうしてもゴミが出る(それ以外にもゴミは出るが)。&lt;/p&gt;

&lt;p&gt;そんな時にゴミ箱が無いと、いちいちゴミ袋の口を広げて捨てるという手間が発生する。面倒くさくなりそうだ。&lt;/p&gt;

&lt;h2&gt;磁石でくっつく小物入れ&lt;/h2&gt;

&lt;p&gt;毎日会社に行く時に持っていくもの、例えばカードキーや定期券入れを入れておき、玄関のドアに貼り付けておくことで、忘れ物をなくすことが出来ると思う。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;以上が、100円ショップでも手に入る物となる。ここから先は家電で必要なものとなる。&lt;/p&gt;

&lt;h2&gt;電子レンジ&lt;/h2&gt;

&lt;p&gt;冷凍食品を温めたり、前日の夜に炊いたご飯を朝に食べる時に欠かせない。あと、コンビニで売っている袋に入ったおかずが買えるようになる。&lt;/p&gt;

&lt;h2&gt;電気ケトル&lt;/h2&gt;

&lt;p&gt;お湯を沸かす用途にももちろん使えるけど、例えばレシピを見ながら料理をしている時に水がXXml必要という場面に遭遇すると思う。&lt;/p&gt;

&lt;p&gt;そういう時にも、電気ケトルの側面の目盛りを使うことでわりと正確な水の計量が出来る。&lt;/p&gt;

&lt;p&gt;ちなみに自分が買ったのは、&lt;a href="http://kakaku.com/item/K0000421004/"&gt;ティファール アプレシア プラス 0.8L BF8051JP [カフェオレ]&lt;/a&gt;というもの。無難なデザインとメーカーということで選んだ。&lt;/p&gt;

&lt;h2&gt;冷蔵庫&lt;/h2&gt;

&lt;p&gt;もし住み始めた期間が冬や春などなら、冷蔵庫はなくても冷暗所に保存することである程度は保存ができると思う。ただ、夏などに住み始めた場合は必須になってくると思う。&lt;/p&gt;

&lt;p&gt;また、冷凍機能付き冷蔵庫がないと冷凍庫で保存が必要なものが買えないので、やはり必要になると思う。&lt;/p&gt;

&lt;p&gt;実際に自分は冷凍機能付き冷蔵庫を買ってから、食材の保存方法を気にしたり、肉や魚など傷みやすいものを気にせず買えるようになった。&lt;/p&gt;

&lt;p&gt;ちなみに自分が買ったのは、&lt;a href="http://kakaku.com/item/J0000011361/"&gt;ハイアール JR-NF140H&lt;/a&gt;という冷蔵庫。運転音も静かで、冷蔵庫を置いているところからドア1枚隔てているのと2.5mくらいは離れている寝室にいても全く気にならないレベル。容量的にも料理の作り置きなどをしていない今のところは問題ない。&lt;/p&gt;

&lt;p&gt;あと、&lt;a href="http://blog.ruedap.com/2011/08/07/reizouko-driven-development"&gt;冷蔵庫の前面をホワイトボード替わりにして設計したWebサービスを今夜リリースします - アインシュタインの電話番号&lt;/a&gt;に憧れて冷蔵庫をホワイトボードとして使うべく、なるべく扉部分が平面で余計な装飾がない白い冷蔵庫ということでこの冷蔵庫を買った。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;以上があって良かったものとなる。ちなみに、欲しいけどまだ買えていないものがある。それらを&lt;a href="http://www.amazon.co.jp/registry/wishlist/SPWZC2FN6GKO"&gt;ほしい物リスト&lt;/a&gt;に挙げているので晒しておく。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>masterブランチへの自動コミット時にTravis CIにbuildさせないようにする設定</title>
    <link rel="alternate" href="/2014/01/17/not-travis-ci-build-on-master-branch.html"/>
    <id>/2014/01/17/not-travis-ci-build-on-master-branch.html</id>
    <published>2014-01-17T02:00:00Z</published>
    <updated>2014-01-17T02:00:00Z</updated>
    <author>
      <name>kubosho_</name>
    </author>
    <content type="html">&lt;p&gt;とある事情により、このブログのリポジトリを&lt;a href="https://github.com/o2project/o2project.github.io"&gt;Organizationアカウント&lt;/a&gt;のほうに移行しました。&lt;/p&gt;

&lt;p&gt;GitHub PagesのuserやOrganizationページは、masterブランチに内容をpushする必要があるため、developというブランチを作成し、Travis CI側でビルドした後masterにcommitするようにしました。&lt;/p&gt;

&lt;p&gt;しかし、masterへの自動commitをTravis CIがした時に、そのcommitにもTravis CIが反応する事態となってしまいました。&lt;/p&gt;

&lt;p&gt;そして開発者曰く、その挙動は抑止できないということです。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;&lt;a href="https://twitter.com/kubosho_"&gt;@kubosho_&lt;/a&gt; 今のところその挙動は抑止できません。申し訳ありません。問題自体は熟知していますので出来るだけ早いうちに修正したいとは考えています。&lt;/p&gt;&amp;mdash; あさり (@hiro_asari) &lt;a href="https://twitter.com/hiro_asari/statuses/418587151748845569"&gt;2014, 1月 2&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;しかし、問題解決できないのかというと、回避する方法はあり、それがコミットメッセージに&lt;code&gt;[ci skip]&lt;/code&gt;を含めるというものです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;git commit -m '[ci skip] Update by Travis CI
&lt;/pre&gt;

&lt;p&gt;具体的には&lt;a href="https://github.com/o2project/o2project.github.io/blob/c2de72f5a08ac2c8cc45780ce11ccd027e5a6974/Rakefile#L46"&gt;こんな感じ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;教えてくださった&lt;a href="https://twitter.com/yo_waka"&gt;@yo_waka&lt;/a&gt;には感謝です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>胸をBEMで例えるとどうなるか？</title>
    <link rel="alternate" href="/2014/01/12/oppai.html"/>
    <id>/2014/01/12/oppai.html</id>
    <published>2014-01-11T15:30:00Z</published>
    <updated>2014-01-11T15:30:00Z</updated>
    <author>
      <name>kubosho_</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://www.facebook.com/events/1446181535605105/"&gt;第二回Web屋乳談義 〜新年だよ( ﾟ∀ﾟ)o彡°おっぱいおっぱい〜&lt;/a&gt;という新年会に参加してきました。&lt;/p&gt;

&lt;p&gt;そこで、最近流行りのBEMで胸を表現する話を皆でして面白かったので酒の勢いを借りて公開しようと思います。&lt;/p&gt;

&lt;h2&gt;はじめに&lt;/h2&gt;

&lt;p&gt;HTMLで身体をセクショニングするのは無理。XMLを使ったほうがいい。&lt;/p&gt;

&lt;h2&gt;Block, Element, Modifierをどうするか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;胸をBlockとする&lt;/li&gt;
&lt;li&gt;左右の胸をElementとして分けるかどうか？&lt;/li&gt;
&lt;li&gt;乳首の色や形はModifier？&lt;/li&gt;
&lt;li&gt;乳輪の中に乳首が入っている感じ。&lt;code&gt;block__element__element&lt;/code&gt;という感じになってしまうのでは&lt;/li&gt;
&lt;li&gt;哺乳類の中には単乳や複乳もいるので、左か右かはModifierとする&lt;/li&gt;
&lt;li&gt;乳首の初期スタイルシートは&lt;a href="http://dskd.jp/archives/35.html"&gt;&amp;quot;TRBL&amp;quot; method&lt;/a&gt;がいいのでは&lt;/li&gt;
&lt;li&gt;問題は:activeと:hoverといった疑似クラスに当てられたスタイルが似ているせいで、感じてもいないのに誤解されるということが起きることであり、このことからも全く違う状態に同じスタイルを適用されるのはまずいということが分かる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それ以外にも話してた気がしますが、いかんせん酒を飲みながら話していたので忘れました。&lt;/p&gt;

&lt;p&gt;ただ、上のことを踏まえて胸をマークアップするなら以下のような感じになるのではないでしょうか(なおルールは&lt;a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/"&gt;MindBEMding&lt;/a&gt;に沿っています)。&lt;/p&gt;

&lt;h3&gt;サンプルコード&lt;/h3&gt;
&lt;pre class="highlight html"&gt;&lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breast"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breast--left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breast--left__areola"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breast--left__nipple"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breast--right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breast--right__areola"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breast--right__nipple"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;h3&gt;終わりに&lt;/h3&gt;

&lt;p&gt;今回、胸をマークアップしてみましたが、胸に関して言えば状態の数がかなりあると思います(例えば乳輪の色とか乳首の形とか)。&lt;/p&gt;

&lt;p&gt;そうなるとModifierの管理が大変そうな感じがしますが、そこは運用していって最適な形にするのがいいのかなと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>package.jsonとKarmaの設定を行う</title>
    <link rel="alternate" href="/2014/01/02/try-packagejson-and-karma.html"/>
    <id>/2014/01/02/try-packagejson-and-karma.html</id>
    <published>2014-01-01T15:50:00Z</published>
    <updated>2014-01-01T15:50:00Z</updated>
    <author>
      <name>kubosho_</name>
    </author>
    <content type="html">&lt;p&gt;あけましておめでとうございます。今年もよろしくお願いします。&lt;/p&gt;

&lt;p&gt;さて、今年最初に何をやろうかと考えたところ、今までほとんどやってこなかったJavaScriptのテスト周りを触れてみようという結論に達し、&lt;a href="http://visionmedia.github.io/mocha/"&gt;Mocha&lt;/a&gt;+&lt;a href="https://github.com/karma-runner/karma"&gt;Karma&lt;/a&gt;という組み合わせを構築しようとしています。&lt;/p&gt;

&lt;p&gt;まだ構築は完了していないですが、ここまでやったことを書いていきます。&lt;/p&gt;

&lt;h2&gt;package.jsonの設定&lt;/h2&gt;

&lt;p&gt;おもむろに&lt;code&gt;npm init&lt;/code&gt;を実行すると以下のことを聞かれます。ちなみに、&lt;a href="http://kokudori.hatenablog.com/entry/2013/04/04/025521"&gt;npmとpackage.json使い方 - Kokudoriing&lt;/a&gt;がよくまとまっていて分からない設定項目があった時に参考にしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;version&lt;/li&gt;
&lt;li&gt;description&lt;/li&gt;
&lt;li&gt;entry point&lt;/li&gt;
&lt;li&gt;test command&lt;/li&gt;
&lt;li&gt;git repository&lt;/li&gt;
&lt;li&gt;keywords&lt;/li&gt;
&lt;li&gt;author&lt;/li&gt;
&lt;li&gt;license&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;答えると、&lt;q&gt;About to write to /path/to/package.json:&lt;/q&gt;と表示され、package.jsonの内容が表示されます。&lt;/p&gt;

&lt;p&gt;その後、&lt;q&gt;Is this ok? (yes)&lt;/q&gt;と聞かれるのでOKならそのままEnterを押してしまいましょう。&lt;/p&gt;

&lt;p&gt;今回は自動生成されたpackage.jsonにKarmaのために以下の記述を追加しています。具体例は&lt;a href="https://github.com/kubosho/jquery-gameText/blob/master/package.json"&gt;jquery-gameText/package.json at master · kubosho/jquery-gameText&lt;/a&gt;になります。&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;span class="s2"&gt;"devDependencies"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"karma"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~0.10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"karma-mocha"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~0.1"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;h2&gt;Karmaの設定&lt;/h2&gt;

&lt;p&gt;KarmaのReadmeに書かれているように、&lt;code&gt;karma init&lt;/code&gt;を実行すると以下のことを聞かれます。デフォルト値が設定されている質問についてはだいたいそのままで大丈夫だと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which testing framework do you want to use ?&lt;/li&gt;
&lt;li&gt;Do you want to use Require.js ?&lt;/li&gt;
&lt;li&gt;Do you want to capture a browser automatically ?

&lt;ul&gt;
&lt;li&gt;なおSafariを選ぶと、karma-safari-launcherがインストールされていない場合は、無いというWarningメッセージが出ます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;What is the location of your source and test files ? You can use glob patterns, eg. &amp;quot;js/&lt;em&gt;.js&amp;quot; or &amp;quot;test/&lt;/em&gt;&lt;em&gt;/&lt;/em&gt;Spec.js&amp;quot;.&lt;/li&gt;
&lt;li&gt;Should any of the files included by the previous patterns be excluded ? You can use glob patterns, eg. &amp;quot;*&lt;em&gt;/&lt;/em&gt;.swp&amp;quot;.&lt;/li&gt;
&lt;li&gt;Do you want Karma to watch all the files and run the tests on change ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらの質問に答えると、&lt;q&gt;Config file generated at &amp;quot;/path/to/karma.conf.js&amp;quot;.&lt;/q&gt;というメッセージが表示され、karma.conf.jsが作成されています。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/karma-runner/karma/blob/master/test/client/karma.conf.js"&gt;karma/test/client/karma.conf.js at master · karma-runner/karma&lt;/a&gt;を見つつ、karma.conf.jsを自分で作成・設定するという手もあると思いますが、&lt;code&gt;karma init&lt;/code&gt;を実行するほうが楽だと思います。&lt;/p&gt;
</content>
  </entry>
</feed>
