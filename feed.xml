<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog.o2p.jp</title>
  <subtitle>kubosho_が日々気づいたことやハマったことを書き残していくブログです。</subtitle>
  <id>http://blog.o2p.jp/</id>
  <link href="http://blog.o2p.jp/"/>
  <link href="http://blog.o2p.jp/feed" rel="self"/>
  <updated>2014-01-17T02:00:00Z</updated>
  <author>
    <name>kubosho_</name>
  </author>
  <entry>
    <title>masterブランチへの自動コミット時にTravis CIにbuildさせないようにする設定</title>
    <link rel="alternate" href="/2014/01/17/not-travis-ci-build-on-master-branch.html"/>
    <id>/2014/01/17/not-travis-ci-build-on-master-branch.html</id>
    <published>2014-01-17T02:00:00Z</published>
    <updated>2014-01-17T02:00:00Z</updated>
    <author>
      <name>kubosho_</name>
    </author>
    <content type="html">&lt;p&gt;とある事情により、このブログのリポジトリを&lt;a href="https://github.com/o2project/o2project.github.io"&gt;Organizationアカウント&lt;/a&gt;のほうに移行しました。&lt;/p&gt;

&lt;p&gt;GitHub PagesのuserやOrganizationページは、masterブランチに内容をpushする必要があるため、developというブランチを作成し、Travis CI側でビルドした後masterにcommitするようにしました。&lt;/p&gt;

&lt;p&gt;しかし、masterへの自動commitをTravis CIがした時に、そのcommitにもTravis CIが反応する事態となってしまいました。&lt;/p&gt;

&lt;p&gt;そして開発者曰く、その挙動は抑止できないということです。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;&lt;a href="https://twitter.com/kubosho_"&gt;@kubosho_&lt;/a&gt; 今のところその挙動は抑止できません。申し訳ありません。問題自体は熟知していますので出来るだけ早いうちに修正したいとは考えています。&lt;/p&gt;&amp;mdash; あさり (@hiro_asari) &lt;a href="https://twitter.com/hiro_asari/statuses/418587151748845569"&gt;2014, 1月 2&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;しかし、問題解決できないのかというと、回避する方法はあり、それがコミットメッセージに&lt;code&gt;[ci skip]&lt;/code&gt;を含めるというものです。&lt;/p&gt;
&lt;pre class="highlight text"&gt;git commit -m '[ci skip] Update by Travis CI
&lt;/pre&gt;
&lt;p&gt;具体的には&lt;a href="https://github.com/o2project/o2project.github.io/blob/c2de72f5a08ac2c8cc45780ce11ccd027e5a6974/Rakefile#L46"&gt;こんな感じ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;教えてくださった&lt;a href="https://twitter.com/yo_waka"&gt;@yo_waka&lt;/a&gt;には感謝です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>胸をBEMで例えるとどうなるか？</title>
    <link rel="alternate" href="/2014/01/12/oppai.html"/>
    <id>/2014/01/12/oppai.html</id>
    <published>2014-01-11T15:30:00Z</published>
    <updated>2014-01-11T15:30:00Z</updated>
    <author>
      <name>kubosho_</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://www.facebook.com/events/1446181535605105/"&gt;第二回Web屋乳談義 〜新年だよ( ﾟ∀ﾟ)o彡°おっぱいおっぱい〜&lt;/a&gt;という新年会に参加してきました。&lt;/p&gt;

&lt;p&gt;そこで、最近流行りのBEMで胸を表現する話を皆でして面白かったので酒の勢いを借りて公開しようと思います。&lt;/p&gt;

&lt;h2&gt;はじめに&lt;/h2&gt;

&lt;p&gt;HTMLで身体をセクショニングするのは無理。XMLを使ったほうがいい。&lt;/p&gt;

&lt;h2&gt;Block, Element, Modifierをどうするか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;胸をBlockとする&lt;/li&gt;
&lt;li&gt;左右の胸をElementとして分けるかどうか？&lt;/li&gt;
&lt;li&gt;乳首の色や形はModifier？&lt;/li&gt;
&lt;li&gt;乳輪の中に乳首が入っている感じ。&lt;code&gt;block__element__element&lt;/code&gt;という感じになってしまうのでは&lt;/li&gt;
&lt;li&gt;哺乳類の中には単乳や複乳もいるので、左か右かはModifierとする&lt;/li&gt;
&lt;li&gt;乳首の初期スタイルシートは&lt;a href="http://dskd.jp/archives/35.html"&gt;&amp;quot;TRBL&amp;quot; method&lt;/a&gt;がいいのでは&lt;/li&gt;
&lt;li&gt;問題は:activeと:hoverといった疑似クラスに当てられたスタイルが似ているせいで、感じてもいないのに誤解されるということが起きることであり、このことからも全く違う状態に同じスタイルを適用されるのはまずいということが分かる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それ以外にも話してた気がしますが、いかんせん酒を飲みながら話していたので忘れました。&lt;/p&gt;

&lt;p&gt;ただ、上のことを踏まえて胸をマークアップするなら以下のような感じになるのではないでしょうか(なおルールは&lt;a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/"&gt;MindBEMding&lt;/a&gt;に沿っています)。&lt;/p&gt;

&lt;h3&gt;サンプルコード&lt;/h3&gt;
&lt;pre class="highlight html"&gt;&lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;breast&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;breast--left&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;breast--left__areola&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;breast--left__nipple&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;breast--right&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;breast--right__areola&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;breast--right__nipple&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h3&gt;終わりに&lt;/h3&gt;

&lt;p&gt;今回、胸をマークアップしてみましたが、胸に関して言えば状態の数がかなりあると思います(例えば乳輪の色とか乳首の形とか)。&lt;/p&gt;

&lt;p&gt;そうなるとModifierの管理が大変そうな感じがしますが、そこは運用していって最適な形にするのがいいのかなと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>package.jsonとKarmaの設定を行う</title>
    <link rel="alternate" href="/2014/01/02/try-packagejson-and-karma.html"/>
    <id>/2014/01/02/try-packagejson-and-karma.html</id>
    <published>2014-01-01T15:50:00Z</published>
    <updated>2014-01-01T15:50:00Z</updated>
    <author>
      <name>kubosho_</name>
    </author>
    <content type="html">&lt;p&gt;あけましておめでとうございます。今年もよろしくお願いします。&lt;/p&gt;

&lt;p&gt;さて、今年最初に何をやろうかと考えたところ、今までほとんどやってこなかったJavaScriptのテスト周りを触れてみようという結論に達し、&lt;a href="http://visionmedia.github.io/mocha/"&gt;Mocha&lt;/a&gt;+&lt;a href="https://github.com/karma-runner/karma"&gt;Karma&lt;/a&gt;という組み合わせを構築しようとしています。&lt;/p&gt;

&lt;p&gt;まだ構築は完了していないですが、ここまでやったことを書いていきます。&lt;/p&gt;

&lt;h2&gt;package.jsonの設定&lt;/h2&gt;

&lt;p&gt;おもむろに&lt;code&gt;npm init&lt;/code&gt;を実行すると以下のことを聞かれます。ちなみに、&lt;a href="http://kokudori.hatenablog.com/entry/2013/04/04/025521"&gt;npmとpackage.json使い方 - Kokudoriing&lt;/a&gt;がよくまとまっていて分からない設定項目があった時に参考にしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;version&lt;/li&gt;
&lt;li&gt;description&lt;/li&gt;
&lt;li&gt;entry point&lt;/li&gt;
&lt;li&gt;test command&lt;/li&gt;
&lt;li&gt;git repository&lt;/li&gt;
&lt;li&gt;keywords&lt;/li&gt;
&lt;li&gt;author&lt;/li&gt;
&lt;li&gt;license&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;答えると、&lt;q&gt;About to write to /path/to/package.json:&lt;/q&gt;と表示され、package.jsonの内容が表示されます。&lt;/p&gt;

&lt;p&gt;その後、&lt;q&gt;Is this ok? (yes)&lt;/q&gt;と聞かれるのでOKならそのままEnterを押してしまいましょう。&lt;/p&gt;

&lt;p&gt;今回は自動生成されたpackage.jsonにKarmaのために以下の記述を追加しています。具体例は&lt;a href="https://github.com/kubosho/jquery-gameText/blob/master/package.json"&gt;jquery-gameText/package.json at master · kubosho/jquery-gameText&lt;/a&gt;になります。&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;span class="s2"&gt;&amp;quot;devDependencies&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;karma&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~0.10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;karma-mocha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~0.1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/pre&gt;
&lt;h2&gt;Karmaの設定&lt;/h2&gt;

&lt;p&gt;KarmaのReadmeに書かれているように、&lt;code&gt;karma init&lt;/code&gt;を実行すると以下のことを聞かれます。デフォルト値が設定されている質問についてはだいたいそのままで大丈夫だと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which testing framework do you want to use ?&lt;/li&gt;
&lt;li&gt;Do you want to use Require.js ?&lt;/li&gt;
&lt;li&gt;Do you want to capture a browser automatically ?

&lt;ul&gt;
&lt;li&gt;なおSafariを選ぶと、karma-safari-launcherがインストールされていない場合は、無いというWarningメッセージが出ます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;What is the location of your source and test files ? You can use glob patterns, eg. &amp;quot;js/&lt;em&gt;.js&amp;quot; or &amp;quot;test/&lt;/em&gt;&lt;em&gt;/&lt;/em&gt;Spec.js&amp;quot;.&lt;/li&gt;
&lt;li&gt;Should any of the files included by the previous patterns be excluded ? You can use glob patterns, eg. &amp;quot;*&lt;em&gt;/&lt;/em&gt;.swp&amp;quot;.&lt;/li&gt;
&lt;li&gt;Do you want Karma to watch all the files and run the tests on change ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらの質問に答えると、&lt;q&gt;Config file generated at &amp;quot;/path/to/karma.conf.js&amp;quot;.&lt;/q&gt;というメッセージが表示され、karma.conf.jsが作成されています。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/karma-runner/karma/blob/master/test/client/karma.conf.js"&gt;karma/test/client/karma.conf.js at master · karma-runner/karma&lt;/a&gt;を見つつ、karma.conf.jsを自分で作成・設定するという手もあると思いますが、&lt;code&gt;karma init&lt;/code&gt;を実行するほうが楽だと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>2013年を振り返ってみる、そして2014年</title>
    <link rel="alternate" href="/2013/12/30/2013-to-2014.html"/>
    <id>/2013/12/30/2013-to-2014.html</id>
    <published>2013-12-30T07:00:00Z</published>
    <updated>2013-12-30T07:00:00Z</updated>
    <author>
      <name>kubosho_</name>
    </author>
    <content type="html">&lt;p&gt;今年もいつの間にやら年の瀬の時期になってました。というわけで今年を振りかえってみようかと思います。&lt;/p&gt;

&lt;h2&gt;今年一番の話題: 転職&lt;/h2&gt;

&lt;p&gt;今年の個人的な一番の話題は、2012年の年末に面白法人カヤックを辞めて、4ヶ月ほど潜伏した後、&lt;a href="http://inputxoutput.com/join-grani/"&gt;株式会社グラニ&lt;/a&gt;(別名&lt;a href="http://grani.jp/"&gt;謎社&lt;/a&gt;)に転職したことでしょうか。&lt;/p&gt;

&lt;p&gt;今まで触ったことない、C#やASP.NET MVC(自分が主に触るのはRazorですが)、TypeScript、そしてIDEはVisual Studio 2013と、かなりWindowsに寄った開発現場は初めてですが、入ってから7ヶ月の間に1,586コミットをして、コミット数が1位になるくらい頑張ってます。&lt;/p&gt;

&lt;p&gt;あとはアプリ自体も今のところ好調です。ただそれはけっして自分だけの力ではなくチーム全員が頑張った結果です。&lt;/p&gt;

&lt;p&gt;ただ、まだまだ改善すべきところはあるのと、あとは一時的にランキングで3冠(参考: &lt;a href="http://gamebiz.jp/?p=125582"&gt;グラニの『神獄のヴァルハラゲート』がスマホ版GREEランキングで首位獲得！　大手ゲーム会社を抑えて3冠達成！　谷氏のコメントも掲載 | Social Game Info&lt;/a&gt;)になったりもしましたが、本当に一時的なものだったので、ある程度の期間3冠にいられるようにしたいなとは思います。&lt;/p&gt;

&lt;h2&gt;今年一番買ってよかったもの&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://blog.sou-lab.com/mac-totebag/"&gt;MacBookを持ち運ぶためのかっこいいトートバッグ | Sou-Lablog&lt;/a&gt;を見て買った、&lt;a href="http://www.focal.co.jp/products/detail.php?product_id=679"&gt;HEX ACADEMY TOTE for MacBook Pro&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;デザイン的にもいいし、MacBook AirとNexus 7とNintendo 3DSを入れてもなお余裕があるというのがいいです。次点で&lt;a href="http://dx39.net/"&gt;Xperia feat. HATSUNE MIKU&lt;/a&gt;。端末のサイズがちょうど手に合っているのと、特に不具合もなく快適に使えるのがいいです。&lt;/p&gt;

&lt;h2&gt;なにげにQiitaにも投稿してた&lt;/h2&gt;

&lt;p&gt;今年、このブログ以外にQiitaでも記事を書いてました。使い分け方としては、Qiitaが「ちょっとしたメモ」、ブログが「がっつりしたメモ」という感じで、スクリーンショットの数や載せるソースの数、あとは文章量によって、使い分けをしていました。&lt;/p&gt;

&lt;p&gt;というわけで、以下が今年Qiitaに投稿した8つの記事です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/kubosho_/items/aeb1c6b0b159f585e91c"&gt;Ruby on Rails+Apacheという組み合わせで「We&amp;apos;re sorry, but something went wrong.」のエラーが出た時の対処法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/kubosho_/items/9dfc8f1085762fc48a2d"&gt;ERROR: Could not find a valid gem &amp;apos;gem名&amp;apos; (&amp;gt;= 0), here is why: Unable to download data from https://rubygems.org/ と出た場合の対処法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/kubosho_/items/ac4d0dee85123393735b"&gt;GoogleAnalytics - Universal Analytics トラッキング コード(analytics.js)でCookieを用いたオプトアウトを行なう方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/kubosho_/items/2faf94e93a8b2dfe44b6"&gt;Mac OS X Mavericksでgemをインストールしようとした時に ERROR: Failed to build gem native extension と怒られた時の対処法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/kubosho_/items/2887d200f9b5aa738fb1"&gt;QiitaのサイトにBEMを勝手に取り入れてみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/kubosho_/items/4f48612e1cec9f9e9638"&gt;「Qiitaのサイトに勝手にBEMを取り入れてみた」の解説&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/kubosho_/items/8b324b5e9aef10b7d04d"&gt;CoffeeScriptで「$ = jQuery」とした時に「jQuery is not defined」というReferenceErrorが出た&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/kubosho_/items/248fd5128366f55513e0"&gt;rbenvで自分が使ったコマンドのメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ruby関連の話題が多めな気がします。どれもちょっとしたメモ(「勝手にBEMを取り入れてみた」シリーズは除く)といった感じで、ブログに載せるほどでもないかなーと思ってQiitaに載せました。あとはメモ程度でも載せないよりかは載せたほうがいいと思ったのもQiitaに載せた理由です。&lt;/p&gt;

&lt;p&gt;エラーを解決した系の記事はエラーメッセージをタイトルに入れることで、検索に引っかかって多く見られることを期待していたりします(それで自分が解決したやり方で直ればなおさらいいですね)。&lt;/p&gt;

&lt;p&gt;来年もQiitaには引き続きちょっとしたメモ系の記事を上げていこうと思います。&lt;/p&gt;

&lt;h2&gt;そして2014年&lt;/h2&gt;

&lt;p&gt;個人的な目標として掲げるのは以下の5つ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ライブラリを3個以上作る&lt;/li&gt;
&lt;li&gt;Webサービスを3個以上作る&lt;/li&gt;
&lt;li&gt;ブログの記事を50個以上書く&lt;/li&gt;
&lt;li&gt;勉強会で2回以上発表する&lt;/li&gt;
&lt;li&gt;冬コミ(C87)サークル参加&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どれも不可能ではないと考えていて、数的に一番多いブログの記事も週に1個かけば達成できる範囲なので出来ると思います。来年はいい意味で目立つ年にしたいな。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>WordPressからGitHub Pages+Middleman+Travis CIに移行したらブログを書く気になれた話</title>
    <link rel="alternate" href="/2013/12/17/wordpress-to-middleman.html"/>
    <id>/2013/12/17/wordpress-to-middleman.html</id>
    <published>2013-12-17T14:59:00Z</published>
    <updated>2013-12-17T14:59:00Z</updated>
    <author>
      <name>kubosho_</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://www.adventar.org/calendars/167"&gt;Blog #blogadvent Advent Calendar 2013&lt;/a&gt; 17日目の記事です。&lt;/p&gt;

&lt;p&gt;かつて、&lt;a href="http://inputxoutput.com/"&gt;WordPressでブログを運営&lt;/a&gt;していましたが、&lt;a href="http://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;+&lt;a href="http://middlemanapp.com/"&gt;Middleman&lt;/a&gt;(&lt;a href="http://middlemanjp.github.io/"&gt;日本語&lt;/a&gt;)+&lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt;に移行してみたら捗るようになったので、その移行話を書いてみます。&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://github.com/kubosho/blog.o2p.jp"&gt;ちなみに移行先のリポジトリはこれです&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;なぜ移行したか&lt;/h2&gt;

&lt;p&gt;移行した理由ですが、簡潔に言うと「記事を公開するまでの流れを楽にしたかった」ということです。そして実際に移行したことによるメリットが2つあります。&lt;/p&gt;

&lt;p&gt;1つめは、記事公開するまでの手順を減らせたことです。例えばWordPressの場合、普段使っているエディタで記事を書いた場合、以下の5つの手間が発生してとても面倒くさいものでした。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;記事をエディタで書く&lt;/li&gt;
&lt;li&gt;ブラウザでWordPressのダッシュボードを開く&lt;/li&gt;
&lt;li&gt;投稿から新規追加を押す&lt;/li&gt;
&lt;li&gt;タイトルと本文、タグなどにそれぞれ書いた内容をコピペしたり、スラッグを決める&lt;/li&gt;
&lt;li&gt;公開ボタンを押す&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;しかしmiddlemanに移行後、手順が以下の通り2つ減り、よりブログの記事を書こうという気になっています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;記事をエディタで書く&lt;/li&gt;
&lt;li&gt;ターミナルやGitをGUIで扱えるソフト(SourceTree)などを開く&lt;/li&gt;
&lt;li&gt;git add . &amp;amp;&amp;amp; git commit &amp;amp;&amp;amp; git push origin master&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2つめは、普段使っているエディタとmarkdown形式が使えるようになったということです。markdown形式については、&lt;a href="http://wordpress.org/plugins/markdown-on-save/"&gt;Markdown on Save&lt;/a&gt;というWordPressのプラグインを使っていましたが、プラグインを追加しなくても標準で対応しているというのが良いと思いました。&lt;/p&gt;

&lt;p&gt;とはいえメリットだけでなく、GitHub Pages+Middleman+Travis CIの連携がちょっと面倒というデメリットはあります(参考までに、下記の移行までの流れの章で移行にあたって参考にしたサイトを載せています)。&lt;/p&gt;

&lt;p&gt;とはいえそれも最初だけで、ブログを書いて公開する時間のほうが移行する準備の時間より長いので、元は取れるかなという感じです。&lt;/p&gt;

&lt;h2&gt;移行までの流れ&lt;/h2&gt;

&lt;p&gt;MiddlemanのインストールとTravis CIで自動ビルドとGitHubへ自動的にpushする流れを作るのに、&lt;a href="http://tricknotes.hateblo.jp/entry/2013/06/17/020229"&gt;Middleman で作った web サイトを Travis + GitHub pages でお手軽に運用する - tricknotesのぼうけんのしょ&lt;/a&gt;を参考にしました。&lt;/p&gt;

&lt;p&gt;Middlemanの設定については、&lt;a href="https://twitter.com/hokaccha"&gt;@hokaccha&lt;/a&gt;のブログ、&lt;a href="http://webtech-walker.com/"&gt;Webtech Walker&lt;/a&gt;の&lt;a href="https://github.com/hokaccha/webtech-walker"&gt;リポジトリ&lt;/a&gt;を見て参考にしています。&lt;/p&gt;

&lt;p&gt;上の2つのリンクと&lt;a href="http://middlemanapp.com/"&gt;公式サイト&lt;/a&gt;のMiddleman Basicsのリンク先を見れば、インストールから設定まで事足りますが、リンクだけ紹介するのも芸がないので、移行にあたり工夫した点を以下に書いていきます。&lt;/p&gt;

&lt;h2&gt;テンプレートファイルをSlimにした&lt;/h2&gt;

&lt;p&gt;ERB形式のテンプレートファイルの場合、Rubyをテンプレートファイルの中に組み込みたいという場合に&amp;lt;% ... %&amp;gt;みたいな感じで、いちいち&amp;lt;&amp;gt;や%を書かないといけなかったり、HTMLの要素を書くときにも&amp;lt;と&amp;gt;を打たないといけないというのが面倒だと感じました(HTMLに関してはEmmetを使えばいい話ですが)。&lt;/p&gt;

&lt;p&gt;なので、Slim形式にテンプレートを書き換え、config.rbで以下の2行を追記し、Slimを使うようにしています。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:markdown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:layout_engine&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:slim&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:blog_layout_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:slim&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;URLにyyyy/mm/ddの形式で年月日を含めるようにした&lt;/h2&gt;

&lt;p&gt;Middleman固有の話ではないのですが、URLに年月日を含めるようにしました。というのもこのブログで扱うのがWebの技術に関することという以上、更新しない限り情報は古くなります。&lt;/p&gt;

&lt;p&gt;そうなった場合、例えば情報を探している人が検索エンジンなどから自分が書いた古くなった情報が載っている記事にアクセスして、かつその情報を参考にしてしまった場合、その時点で正しくない情報に誘導(して|されて)しまったということでお互いもやっとした気持ちになると思います。&lt;/p&gt;

&lt;p&gt;なので、そういうことが減るようURLに年月日を含めることで、もしかしたらこの情報は古いかもしれないという事に気づいてくれたらという期待をこめて、URLに年月日を含めるようにしました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ということで、WordPressからMiddlemanに移行したらブログを書く気になれた話でした。これからもここで記事を書けるよう技術的に精進していきたいと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Time-dimensional擬似クラスについて調べてみた</title>
    <link rel="alternate" href="/2013/12/09/time-dimensional-pseudo-classes.html"/>
    <id>/2013/12/09/time-dimensional-pseudo-classes.html</id>
    <published>2013-12-09T12:30:00Z</published>
    <updated>2013-12-09T12:30:00Z</updated>
    <author>
      <name>kubosho_</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://www.adventar.org/calendars/57"&gt;CSS Property Advent Calendar 2013&lt;/a&gt; 9日目の記事です。&lt;/p&gt;

&lt;p&gt;今日は少し先を見据えて、Selectors Level 4の中から、明日のAdvent Calendar担当でもあるmyakuraさんが書いた文書、&lt;a href="http://myakura.github.io/n/selectors4.html"&gt;CSS4セレクタ (Selectors Level 4) の新機能&lt;/a&gt;内で触れられていない「:current, :past, :future」の各擬似クラスについて、&lt;a href="http://www.w3.org/TR/2013/WD-selectors4-20130502/"&gt;Working Draftの最新版である2013年5月2日版&lt;/a&gt;を元に紹介します。&lt;/p&gt;

&lt;p&gt;CSS Property Advent Calendarなのにセレクタの話になってしまいましたが、&lt;a href="http://dskd.jp/archives/37.html"&gt;すでに&lt;/a&gt;&lt;a href="https://gist.github.com/azusa-tomita/7829371"&gt;2人ほど&lt;/a&gt;セレクタの話をしているようなので、気にしないで3人目になろうと思います。&lt;/p&gt;

&lt;h2&gt;Time-dimensional擬似クラスについて&lt;/h2&gt;

&lt;p&gt;文書が音声で読まれているときや、&lt;a href="http://dev.w3.org/html5/webvtt/"&gt;WebVTT&lt;/a&gt;というWeb上の動画に付けられる字幕に使われるようです。&lt;a href="http://www.w3.org/TR/2013/WD-selectors4-20130502/#time-pseudos"&gt;Time-dimensional Pseudo-classes - Selectors Level 4&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;:current&lt;/h2&gt;

&lt;p&gt;文書内で現在読まれているものを示した擬似クラスです。
:matchsと同じように単体セレクタの連なり(compound selectors)を引数に指定できます。以下のように指定した場合、文書内で現在読まれているものの中に引数に指定したセレクタのどれかが含まれていれば、強調して表示されるようです。&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;span class="nd"&gt;:current&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;:past, :future&lt;/h2&gt;

&lt;p&gt;:past, :futureについては、現在の再生位置を元に過去や未来を示す擬似クラスで、WebVTTでも定義されているようですが、それ以上は分からないです。&lt;/p&gt;

&lt;h2&gt;:current, :past, :futureが示す部分&lt;/h2&gt;

&lt;p&gt;文章で書いていても分かりづらいと思うので、現在の自分の認識を画像にしてみました。&lt;/p&gt;

&lt;figure&gt;
    &lt;a href="http://imgur.com/nWDAAsu"&gt;&lt;img src="http://i.imgur.com/nWDAAsu.jpg" title="Hosted by imgur.com"/&gt;&lt;/a&gt;
    &lt;figcaption&gt;&lt;a href="http://www.html5rocks.com/ja/tutorials/track/basics/"&gt;track 要素の基礎 - HTML5 Rocks&lt;/a&gt;内の動画より画像を作成&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;上記の画像で、&amp;quot;always&amp;quot;の部分が発音されていた場合、&amp;quot;The Web is&amp;quot;は:past, &amp;quot;always&amp;quot;は:current, &amp;quot;changing&amp;quot;は:futureになるのかなと思います。&lt;/p&gt;

&lt;h2&gt;使い道を妄想してみる&lt;/h2&gt;

&lt;p&gt;まず:currentについてですが、これは字幕のどこが読まれているか視覚的にも分かりやすくなるという点ではいいと思います。また、:futureについては、文字色を背景と同化させるようにしてまだ読まれていないということを視覚的に分かるようにするという使い方があると思います。&lt;/p&gt;

&lt;p&gt;:pastは、:currentより過去を示す擬似クラスということで、カラオケの字幕のように使えるのではと思います。&lt;/p&gt;

&lt;p&gt;以上で紹介は終わりです。曖昧なところがあるので、ここはこうだ！というところがありましたら、指摘していただけるとありがたいです。というわけで、明日の担当はmyakuraさんです。&lt;/p&gt;

&lt;h2&gt;参照したページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.w3.org/TR/2013/WD-selectors4-20130502/#time-pseudos"&gt;Selectors Level 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.w3.org/html5/webvtt/#the-past-and-future-pseudo-classes"&gt;WebVTT: The Web Video Text Tracks Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/HTML/WebVTT"&gt;WebVTT - HTML | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.innov-i.co.jp/innov-staff-blog/2013/0611_200000.html"&gt;Selectors Level 4（CSS4セレクタ） - innov-staff-blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://myakura.github.io/n/selectors4.html"&gt;CSS4セレクタ (Selectors Level 4) の新機能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
